{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-0c4438ec19f32e8b.js","node_modules/@parcel/runtime-js/lib/helpers/worker/js-loader.js","node_modules/@parcel/runtime-js/lib/helpers/cacheLoader.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","wasm/cas.worker.js"],"sourcesContent":["module.exports = (require(\"./helpers/worker/js-loader\")(require('./helpers/bundle-url').getBundleURL('6KyRn') + \"cas.d026a4bb.js\" + \"?\" + Date.now()).catch(err => {delete module.bundle.cache[module.id]; throw err;})).then(() => module.bundle.root('jFXNV'));","\"use strict\";\n\n/* global __parcel__importScripts__:readonly*/\nvar cacheLoader = require('../cacheLoader');\nmodule.exports = cacheLoader(function (bundle) {\n  return new Promise(function (resolve, reject) {\n    try {\n      __parcel__importScripts__(bundle);\n      resolve();\n    } catch (e) {\n      reject(e);\n    }\n  });\n});","\"use strict\";\n\nvar cachedBundles = {};\nvar cachedPreloads = {};\nvar cachedPrefetches = {};\nfunction getCache(type) {\n  switch (type) {\n    case 'preload':\n      return cachedPreloads;\n    case 'prefetch':\n      return cachedPrefetches;\n    default:\n      return cachedBundles;\n  }\n}\nmodule.exports = function (loader, type) {\n  return function (bundle) {\n    var cache = getCache(type);\n    if (cache[bundle]) {\n      return cache[bundle];\n    }\n    return cache[bundle] = loader.apply(null, arguments).catch(function (e) {\n      delete cache[bundle];\n      throw e;\n    });\n  };\n};","\"use strict\";\n\nvar bundleURL = {};\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n  return value;\n}\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n  return '/';\n}\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\n// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^/]+/);\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n  return matches[0];\n}\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","/**\n * @license\n * Copyright 2015 The Emscripten Authors\n * SPDX-License-Identifier: MIT\n */\n\n// Pthread Web Worker startup routine:\n// This is the entry point file that is loaded first by each Web Worker\n// that executes pthreads on the Emscripten application.\n\n'use strict';\n\nvar Module = {};\n\n// Thread-local guard variable for one-time init of the JS state\nvar initializedJS = false;\n\nfunction assert(condition, text) {\n  if (!condition) abort('Assertion failed: ' + text);\n}\n\nfunction threadPrintErr() {\n  var text = Array.prototype.slice.call(arguments).join(' ');\n  console.error(text);\n}\nfunction threadAlert() {\n  var text = Array.prototype.slice.call(arguments).join(' ');\n  postMessage({cmd: 'alert', text: text, threadId: Module['_pthread_self']()});\n}\n// We don't need out() for now, but may need to add it if we want to use it\n// here. Or, if this code all moves into the main JS, that problem will go\n// away. (For now, adding it here increases code size for no benefit.)\nvar out = () => { throw 'out() is not defined in worker.js.'; }\nvar err = threadPrintErr;\nself.alert = threadAlert;\n\nModule['instantiateWasm'] = (info, receiveInstance) => {\n  // Instantiate from the module posted from the main thread.\n  // We can just use sync instantiation in the worker.\n  var module = Module['wasmModule'];\n  // We don't need the module anymore; new threads will be spawned from the main thread.\n  Module['wasmModule'] = null;\n  var instance = new WebAssembly.Instance(module, info);\n  // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193,\n  // the above line no longer optimizes out down to the following line.\n  // When the regression is fixed, we can remove this if/else.\n  return receiveInstance(instance);\n}\n\n// Turn unhandled rejected promises into errors so that the main thread will be\n// notified about them.\nself.onunhandledrejection = (e) => {\n  throw e.reason ?? e;\n};\n\nfunction handleMessage(e) {\n  try {\n    if (e.data.cmd === 'load') { // Preload command that is called once per worker to parse and load the Emscripten code.\n\n    // Until we initialize the runtime, queue up any further incoming messages.\n    let messageQueue = [];\n    self.onmessage = (e) => messageQueue.push(e);\n\n    // And add a callback for when the runtime is initialized.\n    self.startWorker = (instance) => {\n      Module = instance;\n      // Notify the main thread that this thread has loaded.\n      postMessage({ 'cmd': 'loaded' });\n      // Process any messages that were queued before the thread was ready.\n      for (let msg of messageQueue) {\n        handleMessage(msg);\n      }\n      // Restore the real message handler.\n      self.onmessage = handleMessage;\n    };\n\n      // Module and memory were sent from main thread\n      Module['wasmModule'] = e.data.wasmModule;\n\n      // Use `const` here to ensure that the variable is scoped only to\n      // that iteration, allowing safe reference from a closure.\n      for (const handler of e.data.handlers) {\n        Module[handler] = function() {\n          postMessage({ cmd: 'callHandler', handler, args: [...arguments] });\n        }\n      }\n\n      Module['wasmMemory'] = e.data.wasmMemory;\n\n      Module['buffer'] = Module['wasmMemory'].buffer;\n\n      Module['workerID'] = e.data.workerID;\n\n      Module['ENVIRONMENT_IS_PTHREAD'] = true;\n\n      (e.data.urlOrBlob ? import(e.data.urlOrBlob) : import('./cas.mjs'))\n      .then(exports => exports.default(Module));\n    } else if (e.data.cmd === 'run') {\n      // Pass the thread address to wasm to store it for fast access.\n      Module['__emscripten_thread_init'](e.data.pthread_ptr, /*isMainBrowserThread=*/0, /*isMainRuntimeThread=*/0, /*canBlock=*/1);\n\n      // Await mailbox notifications with `Atomics.waitAsync` so we can start\n      // using the fast `Atomics.notify` notification path.\n      Module['__emscripten_thread_mailbox_await'](e.data.pthread_ptr);\n\n      assert(e.data.pthread_ptr);\n      // Also call inside JS module to set up the stack frame for this pthread in JS module scope\n      Module['establishStackSpace']();\n      Module['PThread'].receiveObjectTransfer(e.data);\n      Module['PThread'].threadInitTLS();\n\n      if (!initializedJS) {\n        // Embind must initialize itself on all threads, as it generates support JS.\n        // We only do this once per worker since they get reused\n        Module['__embind_initialize_bindings']();\n        initializedJS = true;\n      }\n\n      try {\n        Module['invokeEntryPoint'](e.data.start_routine, e.data.arg);\n      } catch(ex) {\n        if (ex != 'unwind') {\n          // The pthread \"crashed\".  Do not call `_emscripten_thread_exit` (which\n          // would make this thread joinable).  Instead, re-throw the exception\n          // and let the top level handler propagate it back to the main thread.\n          throw ex;\n        }\n      }\n    } else if (e.data.cmd === 'cancel') { // Main thread is asking for a pthread_cancel() on this thread.\n      if (Module['_pthread_self']()) {\n        Module['__emscripten_thread_exit'](-1);\n      }\n    } else if (e.data.target === 'setimmediate') {\n      // no-op\n    } else if (e.data.cmd === 'checkMailbox') {\n      if (initializedJS) {\n        Module['checkMailbox']();\n      }\n    } else if (e.data.cmd) {\n      // The received message looks like something that should be handled by this message\n      // handler, (since there is a e.data.cmd field present), but is not one of the\n      // recognized commands:\n      err('worker.js received unknown command ' + e.data.cmd);\n      err(e.data);\n    }\n  } catch(ex) {\n    err('worker.js onmessage() captured an uncaught exception: ' + ex);\n    if (ex && ex.stack) err(ex.stack);\n    if (Module['__emscripten_thread_crashed']) {\n      Module['__emscripten_thread_crashed']();\n    }\n    throw ex;\n  }\n};\n\nself.onmessage = handleMessage;\n\n\n"],"names":[],"version":3,"file":"cas.worker.87ea8e45.js.map","sourceRoot":"/__parcel_source_root/"}